[{"title":"Unity网络游戏开发(1)","date":"2022-11-16T06:19:47.000Z","url":"/2022/11/16/Unity%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/","tags":[["网络游戏","/tags/%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F/"],["unity","/tags/unity/"]],"categories":[["Unity网络游戏开发","/categories/Unity%E7%BD%91%E7%BB%9C%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"]],"content":"近几年大量的网络游戏大热，相较于单机多了更多的趣味，且手游越来越火热，所以网络游戏开发势必成为一个客户端程序员的基本素养，不仅要了解客户端的搭建，还要熟悉服务端的基本实现方式。 本系列专栏作为Unity3D网络游戏实战的笔记总结 第一章 网络游戏的开端1.1 服务端一款网络游戏分为客户端服务端两个部分，客户端在用户设备上运行，服务端则在游戏运营商的服务器上运行。服务端与客户端之间通常使用TCP网络通信，各个服务端之间互相使用TCP连接，形成服务端集群。 1.2 Socket我们都知道计算机网络七层模型和五层模型，那在学习的时候常用的五层模型来说，分为物理层，数据链路层，网络层，传输层，应用层，我们也知道传输层实现端到端的通信主要的两个协议：TCP协议、UDP协议，这两个协议的区别与实现请自行去学习计算机网络这门课，我们今天要介绍的是Socket。可能有人和我当时有一样的疑问，这个Socket是应用层的还是传输层的，经过我的查阅，这个Socket应该和TCP、UDP一样属于传输层，我们可以把它理解为TCP、UDP协议的封装，以及对外提供的接口。 那么它其中都包含了什么呢？ ​ 1.协议（TCP，UDP） ​ 2.本地IP地址 ​ 3.本地端口 ​ 4.远程IP地址 ​ 5.远程端口 每一条Socket连接代表着：本地Socket→本地端口→网络介质→远程端口→远程Socket 的链路。 为了方便之后的使用，我们先了解一下Socket通信的完整流程（TCP协议） ​ 1.创建一个Socket对象（使用API Socket），绑定本地使用的端口，服务端一定要在程序中指定端口进行绑定（使用API Bind），而客户端在连接（使用API Connect）时会由系统分配端口，可以省去绑定步骤 ​ 2.服务端开启监听（使用API Listen），等待客户端接入 ​ 3.客户端连接服务器（使用API Connect） ​ 4.服务端接收连接（使用API Accept） ​ 5.客户端与服务端通过Send和Receive等API收发数据 ​ 6.某一方关闭连接（使用API Close），结束通信 第二章 异步API2.1 API如果使用上述API会因为是同步程序导致在网络环境稍差的情况下会造成客户端卡顿，所以同步API一般只用于早期测试，真正开发的时候会尽量使用异步API，虽然异步API不是那么容易理解，但是他能使客户端更加流畅。 而这些API基本都是上面描述的API前面加上Begin前缀，比如Connect的异步调用就是BeginConnect。 所有的异步API参数中都有一个委托，这个委托需要放入一个回调函数，以达到异步的效果。 2.2 非异步方式解决程序卡顿问题异步很好，而且在实际的游戏开发中也会更多的使用异步API来实现网络编程。 但是同时也有其他的一些API也能够达到类似的目的。也就是Poll、Select的API。 2.2.1 PollPoll的作用就是判断某个Socket是否可读可写可用，调用方式为 microSeconds：等待回应的时间，-1为一直等待，0表示不阻塞 mode： SelectMode.SelectRead：是否可读 SelectMode.SelectWrite：是否可写 SelectMode.SelectError：是否可用 Poll的服务端的核心代码为： Poll简单来说就是一个一个检测是否有可读信息，有就处理，这样就能避免明明没有可用的消息还是将程序阻塞在哪里，导致卡顿，但是由于没有数据的时候也还是需要检测数据，同样也还是浪费，且导致CPU占用率过高。 2.2.2 SelectSelect相对Poll来说实现了多路复用，即同时检测多个Socket状态，调用方式为： 前三个参数分别对应三个列表，第四个参数为等待回应时间 Select服务端的核心代码： Select与Poll其实很相近，只是Poll是一个一个处理，导致其频繁的调用造成CPU占用率高，但是Select集中去处理，调用次数少CPU占用率就会稍微低一点，但是两个方法都是使用一个死循环循环的去执行，在客户端中也是在Update函数里面不停检测，所以商业上为了达到性能的极致通常还是会选用异步。 第三章 大乱斗游戏本游戏的原代码 服务端 客户端"}]